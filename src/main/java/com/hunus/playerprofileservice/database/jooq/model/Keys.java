/*
 * This file is generated by jOOQ.
 */
package com.hunus.playerprofileservice.database.jooq.model;


import com.hunus.playerprofileservice.database.jooq.model.tables.Clans;
import com.hunus.playerprofileservice.database.jooq.model.tables.Devices;
import com.hunus.playerprofileservice.database.jooq.model.tables.FlywaySchemaHistory;
import com.hunus.playerprofileservice.database.jooq.model.tables.PlayerProfiles;
import com.hunus.playerprofileservice.database.jooq.model.tables.records.ClanRecord;
import com.hunus.playerprofileservice.database.jooq.model.tables.records.DeviceRecord;
import com.hunus.playerprofileservice.database.jooq.model.tables.records.FlywaySchemaHistoryRecord;
import com.hunus.playerprofileservice.database.jooq.model.tables.records.PlayerProfileRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClanRecord> CLAN_PKEY = Internal.createUniqueKey(Clans.CLANS, DSL.name("clan_pkey"), new TableField[] { Clans.CLANS.ID }, true);
    public static final UniqueKey<DeviceRecord> QUEUES_PKEY = Internal.createUniqueKey(Devices.DEVICE, DSL.name("queues_pkey"), new TableField[] { Devices.DEVICE.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<PlayerProfileRecord> RULES_PKEY = Internal.createUniqueKey(PlayerProfiles.PLAYER_PROFILE, DSL.name("rules_pkey"), new TableField[] { PlayerProfiles.PLAYER_PROFILE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DeviceRecord, PlayerProfileRecord> DEVICE__DEVICE_PLAYER_ID_FKEY = Internal.createForeignKey(Devices.DEVICE, DSL.name("device_player_id_fkey"), new TableField[] { Devices.DEVICE.PLAYER_ID }, Keys.RULES_PKEY, new TableField[] { PlayerProfiles.PLAYER_PROFILE.ID }, true);
    public static final ForeignKey<PlayerProfileRecord, ClanRecord> PLAYER_PROFILE__PLAYER_PROFILE_CLAN_ID_FKEY = Internal.createForeignKey(PlayerProfiles.PLAYER_PROFILE, DSL.name("player_profile_clan_id_fkey"), new TableField[] { PlayerProfiles.PLAYER_PROFILE.CLAN_ID }, Keys.CLAN_PKEY, new TableField[] { Clans.CLANS.ID }, true);
}
