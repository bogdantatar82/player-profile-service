/*
 * This file is generated by jOOQ.
 */
package com.hunus.playerprofileservice.database.jooq.model.tables;


import com.hunus.playerprofileservice.database.jooq.TimestampDateTimeBinding;
import com.hunus.playerprofileservice.database.jooq.model.Keys;
import com.hunus.playerprofileservice.database.jooq.model.Public;
import com.hunus.playerprofileservice.database.jooq.model.tables.records.ClanRecord;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clans extends TableImpl<ClanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clan</code>
     */
    public static final Clans CLANS = new Clans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClanRecord> getRecordType() {
        return ClanRecord.class;
    }

    /**
     * The column <code>public.clan.id</code>.
     */
    public final TableField<ClanRecord, UUID> ID = createField("id", SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.clan.name</code>.
     */
    public final TableField<ClanRecord, String> NAME = createField("name", SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.clan.created</code>.
     */
    public final TableField<ClanRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new TimestampDateTimeBinding());

    /**
     * The column <code>public.clan.modified</code>.
     */
    public final TableField<ClanRecord, LocalDateTime> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new TimestampDateTimeBinding());

    private Clans(Name alias, Table<ClanRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clans(Name alias, Table<ClanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.clan</code> table reference
     */
    public Clans(String alias) {
        this(DSL.name(alias), CLANS);
    }

    /**
     * Create an aliased <code>public.clan</code> table reference
     */
    public Clans(Name alias) {
        this(alias, CLANS);
    }

    /**
     * Create a <code>public.clan</code> table reference
     */
    public Clans() {
        this(DSL.name("clan"), null);
    }

    public <O extends Record> Clans(Table<O> child, ForeignKey<O, ClanRecord> key) {
        super(child, key, CLANS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClanRecord> getPrimaryKey() {
        return Keys.CLAN_PKEY;
    }

    @Override
    public Clans as(String alias) {
        return new Clans(DSL.name(alias), this);
    }

    @Override
    public Clans as(Name alias) {
        return new Clans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clans rename(String name) {
        return new Clans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clans rename(Name name) {
        return new Clans(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
